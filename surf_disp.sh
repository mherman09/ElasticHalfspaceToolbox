#!/bin/sh

###############################################################################
# Script for automatically computing and plotting surface displacements 
# generated by an earthquake in an elastic half-space.
###############################################################################

gmt set PS_MEDIA letter

if [ ! -f polar_mwh.cpt ]; then
cat > polar_mwh.cpt << EOF
# Simulates the POLAR colormap in Matlab
# Modified to make small values white
-1	blue	-0.1	white
-0.1	white	0.1	white
0.1	white	1	red
EOF
fi

###############################################################################
# The user can specify the following variables:
#  PSFILE   Name of the output PostScript file
#  NN       Density of the computation grid (NN x NN)
#  SAMP     Sampling interval (from the NN x NN grid) for plotting vectors
#  DISP_THR (Horizontal) displacement threshold for plotting as bold vectors
###############################################################################

# Name of output PostScript file
PSFILE="surf_disp.ps"

# Background vertical displacement grid is (NN x NN) points
NN="100"
#NN="50"

# Horizontal vectors sampled every SAMP points from (NN x NN) grid
SAMP="5"
NN_SAMP=`echo $NN $SAMP | awk '{print int($1/$2)}'`

# Horizontal displacements below DISP_THR will be faded
DISP_THR="0.05" # meters

###############################################################################
#	PARSE COMMAND LINE TO GET SOURCE TYPE AND FILE NAME
###############################################################################

function USAGE() {
echo
echo "Usage: surf_disp.sh SRC_TYPE SRC_FILE [-Rw/e/s/n] [-seg] [-Tvmin/vmax/dv]"
echo "    SRC_TYPE    Either MT (moment tensor) or FFM (finite fault model)"
echo "    SRC_FILE    Name of input file"
echo "                  MT:  EVLO EVLA EVDP STR DIP RAK MAG"
echo "                  FFM: finite fault model in subfault format"
echo "    -Rw/e/s/n   Define map limits (optional)"
echo
exit
}
if [ $# -lt 2 ]
then
    echo "!! Error: SRC_TYPE and SRC_FILE arguments required"
    echo "!!        Map limits (-Rw/e/s/n) optional"
    USAGE
fi
SRC_TYPE="$1"
SRC_FILE="$2"
# Check that source type is correct
if [ $SRC_TYPE != "FFM" -a $SRC_TYPE != "MT" ]
then
    echo "!! Error: source type must be FFM or MT"
    USAGE
fi
# Check that input file exists
if [ ! -f $SRC_FILE ]
then
    echo "!! Error: no source file $SRC_FILE found"
    USAGE
fi
# Parse optional arguments
LIMS=""
SEG="0"
VERT_CPT_RANGE=""
shift;shift
while [ "$1" != "" ]
do
    case $1 in
        -R*) LIMS="$1";;
        -T*) VERT_CPT_RANGE="$1";;
        -seg) SEG="1" ;;
        *) echo "!! Error: no option \"$1\""; USAGE;;
    esac
    shift
done

###############################################################################
# The appearance of displacements plotted on the map is controlled by awk
# commands created within this script. To adjust the coloring, scaling and
# labeling on the figure, adjust these awk commands as necessary.
###############################################################################

# Define the value at which the color bar for vertical displacements 
# will saturate, based on maximum vertical displacements.
# IF (MAXIMUM VERTICAL DISPLACEMENT >= THRESHOLD) {USE THIS SATURATION VALUE}
cat > vert_scale_max.awk << EOF
{
  if (\$1>=2) {print 2}
  else if (\$1>=1) {print 1}
  else if (\$1>=0.5) {print 0.5}
  else if (\$1>=0.2) {print 0.2}
  else {print 0.1}
}
EOF

# Define the annotation increment for the vertical displacement scale bar,
# based on the saturation value above.
# IF (MAXIMUM VERTICAL DISPLACEMENT >= THRESHOLD) {USE THIS ANNOTATION INCREMENT}
cat > vert_scale_lbl.awk << EOF
{
  if (\$1>=2) {print 0.5}
  else if (\$1>=1) {print 0.2}
  else if (\$1>=0.5) {print 0.1}
  else if (\$1>=0.2) {print 0.05}
  else {print 0.02}
}
EOF

# Use the maximum horizontal displacement to define the length of the
# vector in the legend.
# IF (MAXIMUM HORIZONTAL DISPLACEMENT >= THRESHOLD) {USE THIS LENGTH IN METERS AS LEGEND VECTOR}
cat > vect_label.awk << EOF
{
  if (\$1>10) {print 5}
  else if (\$1>5) {print 2}
  else if (\$1>1) {print 1}
  else {print 0.5}
}
EOF

# Use the maximum horizontal displacement to define the vector scaling.
# Larger earthquakes should have a smaller scale factor for all of the
# vectors to fit on the map.
# IF (MAXIMUM HORIZONTAL DISPLACEMENT >= THRESHOLD) {USE THIS VECTOR SCALING}
cat > vect_scale.awk << EOF
{
  if (\$1>10) {print 0.4}
  else if (\$1>5) {print 1}
  else if (\$1>1) {print 2}
  else {print 5}
}
EOF

###############################################################################
###############################################################################
# Everything below this point should be automated. This script requires the
# tools O92UTIL, GRID, and FF2GMT from Matt's codes, and creates the figure
# using GMT 5 commands. All of the work is performed in the same directory
# that the script is run from.
###############################################################################
###############################################################################

#####
#	INPUT FILES FOR DISPLACEMENT CALCULATION
#####
if [ $SRC_TYPE == "FFM" ]
then
    # Copy FFM to new file name
    cp $SRC_FILE ./ffm.dat
else
    # Copy MT to new file name
    cp $SRC_FILE ./mt.dat
fi

# Elastic half-space properties
LAMDA="4e10"   # Lame parameter
MU="4e10"      # Shear modulus
echo "Lame $LAMDA $MU" > haf.dat

#####
#	SET UP COMPUTATION GRID
#####
Z="0.0" # Depth is zero on the surface
if [ -z $LIMS ]
then
    # Use "-auto" option in O92UTIL to get rough map limits
    D="10"  # Large initial increment, to get map limits without taking much time
    if [ $SRC_TYPE == "FFM" ]
    then
        o92util -ffm ffm.dat -auto h $Z $D -haf haf.dat -disp disp.out > auto.dat
    else
        o92util -mag mt.dat -auto h $Z $D -haf haf.dat -disp disp.out -gmt rect.out > auto.dat
    fi
    rm autosta.dat
    W=`grep " W: " auto.dat | awk '{print $2}'`
    E=`grep " E: " auto.dat | awk '{print $2}'`
    S=`grep " S: " auto.dat | awk '{print $2}'`
    N=`grep " N: " auto.dat | awk '{print $2}'`
    echo "Starting map limits: $W $E $S $N"
    
    # Determine if map has decent aspect ratio and correct as necessary
    # Mercator projection x and y lengths
    X=`echo $W $E | awk '{print $2-$1}'`
    Y=`echo $S $N |\
       awk '{
         v2 = log(sin(3.14159/4+$2/2*0.01745)/cos(3.14159/4+$2/2*0.01745))
         v1 = log(sin(3.14159/4+$1/2*0.01745)/cos(3.14159/4+$1/2*0.01745))
         print v2-v1
       }' |\
       awk '{print $1/0.017}'`
    # Check map aspect ratio (no skinnier than 1.4:1)
    FIX=`echo $X $Y |\
         awk '{
           if ($1>1.4*$2) {print "fixx"}
           else if ($2>1.4*$1) {print "fixy"}
           else {print 1}
         }'`
    # Reduce map limits in long dimension
    if [ $FIX == "fixx" ]
    then
        NEW=`echo $W $E $Y | awk '{print 0.5*($1+$2)-$3*0.70,0.5*($1+$2)+$3*0.70}'`
        W=`echo $NEW | awk '{print $1}'`
        E=`echo $NEW | awk '{print $2}'`
    elif [ $FIX == "fixy" ]
    then
        NEW=`echo $S $N $X $Y |\
             awk '{print 0.5*($1+$2)-0.7*$3/$4*($2-$1),0.5*($1+$2)+0.7*$3/$4*($2-$1)}'`
        S=`echo $NEW | awk '{print $1}'`
        N=`echo $NEW | awk '{print $2}'`
    fi
    # Round map limits to nearest 0.1
    W=`echo "$W $E" | awk '{printf("%.1f"),$1}'`
    E=`echo "$W $E" | awk '{printf("%.1f"),$2}'`
    S=`echo "$S $N" | awk '{printf("%.1f"),$1}'`
    N=`echo "$S $N" | awk '{printf("%.1f"),$2}'`
    echo "Final map limits:    $W $E $S $N"
else
    W=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $1}'`
    E=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $2}'`
    S=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $3}'`
    N=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $4}'`
    echo "Using map limits from command line: $W $E $S $N"
fi

# Create (NN x NN) point horizontal grid
grid -x $W $E -nx $NN -y $S $N -ny $NN -z $Z -o sta.dat
grid -x $W $E -nx $NN_SAMP -y $S $N -ny $NN_SAMP -z $Z -o sta_samp.dat

#####
#	COMPUTE SURFACE DISPLACEMENTS
#####
if [ $SRC_TYPE == "FFM" ]
then
    o92util -ffm ffm.dat -sta sta.dat -haf haf.dat -disp disp.out -prog
    o92util -ffm ffm.dat -sta sta_samp.dat -haf haf.dat -disp disp_samp.out -prog
else
    o92util -mag mt.dat -sta sta.dat -haf haf.dat -disp disp.out -prog
    o92util -mag mt.dat -sta sta_samp.dat -haf haf.dat -disp disp_samp.out -prog
fi

# Extract maximum vertical displacements and determine scale parameters for gridding
MINMAX=`awk '{print $6}' disp.out | awk 'BEGIN{mn=1e10;mx=-1e10}{if($1<mn){mn=$1};if($1>mx){mx=$1}}END{print mn,mx}'`
V1=`echo $MINMAX | awk '{if($1<0){print $1*(-1)}else{print $1}}'`
V2=`echo $MINMAX | awk '{if($2<0){print $2*(-1)}else{print $2}}'`
T=`echo $V1 $V2 | awk '{if($1>$2){print $1}else{print $2}}' | awk -f vert_scale_max.awk`
DT=`echo $T | awk -f vert_scale_lbl.awk`

#####
#	PLOT RESULTS
#####
PORTRAIT=`echo $X $Y | awk '{if($1<$2){print "-P"}}'`
PROJ="-JM5i $PORTRAIT"
LIMS="-R$W/$E/$S/$N"

# Colored grid of vertical displacements plotted under horizontal displacement vectors
if [ -z $VERT_CPT_RANGE ]
then
    gmt makecpt -T-$T/$T/0.01 -C./polar_mwh.cpt -D > vert.cpt
else
    gmt makecpt $VERT_CPT_RANGE -C./polar_mwh.cpt -D > vert.cpt
fi
awk '{print $1,$2,$6}' disp.out | gmt xyz2grd -Gvert.grd $LIMS -I$NN+/$NN+
gmt grdimage vert.grd $PROJ $LIMS -Cvert.cpt -Y1.5i -K > $PSFILE
gmt psscale -D2.5i/-0.8i/5.0i/0.2ih -Cvert.cpt -Ba$DT -Bg$DT \
    -B+l"Vertical Displacement (m)" -Al -K -O >> $PSFILE

# Map stuff
ANNOT=`echo $W $E | awk '{if($2-$1<=10){print 1}else{print 2}}'`
gmt psbasemap $PROJ $LIMS -Bxa${ANNOT} -Bya1 -BWeSn -K -O --MAP_FRAME_TYPE=plain >> $PSFILE
gmt pscoast $PROJ $LIMS -W1p,105/105/105 -G205/205/205 -N1/0.5p -Dh -K -O -t85 >> $PSFILE

# Plot FFM slip contours
if [ $SRC_TYPE == "FFM" ]
then
    if [ $SEG -eq 0 ]
    then
        ff2gmt -f ffm.dat -slip slip.out -clip clip.out
    else
        ff2gmt -f ffm.dat -slip slip.out -clipseg clip.out
    fi
    MAXSLIP=`awk '{print $3}' slip.out | awk 'BEGIN{mx=0}{if($1>mx){mx=$1}}END{print mx}' | awk '{print $1}'`
    CONT=`echo $MAXSLIP |\
          awk '{
            if ($1>=50) {print 10}
            else if ($1>=20) {print 5}
            else if ($1>=10) {print 2}
            else if ($1>=2) {print 1}
            else {print 0.5}
          }'`
    echo $CONT $MAXSLIP | awk '{for (i=$1;i<=$2;i=i+$1){print i,"C"}}' > junk
    awk '{print $1,$2,$3}' slip.out |\
        gmt surface -Gslip.grd -I0.10/0.10 -Tb1 -Ti0.25 $LIMS
    gmt psclip clip.out $PROJ $LIMS -K -O >> $PSFILE
    gmt grdcontour slip.grd $PROJ $LIMS -W1p,205/205/205 -Cjunk -K -O -t40 >> $PSFILE
    gmt psclip -C -K -O >> $PSFILE
    gmt psxy clip.out $PROJ $LIMS -W1p,205/205/205 -K -O -t40 >> $PSFILE
    rm junk
else
    awk '{print $1,$2,$4,$5,$6}' rect.out |\
        gmt psxy $PROJ $LIMS -SJ -W1p,205/205/205 -K -O -t40 >> $PSFILE
fi

# Plot epicenter
if [ $SRC_TYPE == "FFM" ]
then
    LONX=`sed -n -e "3p" ffm.dat | sed -e "s/.*Lon:/Lon:/" | awk '{print $2}'`
    LATX=`sed -n -e "3p" ffm.dat | sed -e "s/.*Lon:/Lon:/" | awk '{print $4}'`
    echo $LONX $LATX |\
        gmt psxy $PROJ $LIMS -Sa0.15i -W1p,55/55/55 -K -O -t50 >> $PSFILE
fi

# If max displacement is much larger than other displacements, don't use it
MAXLN=`awk '{print sqrt($4*$4+$5*$5)}' disp_samp.out |\
       awk 'BEGIN{m1=0;m2=0}
            {if($1>m1){m2=m1;m1=$1;ln=NR}}
            END{if(m1>2*m2){print ln}else{print 0}}'`
# Scale vectors differently depending on maximum horizontal displacement
MAX=`awk '{if(NR!='"$MAXLN"'){print sqrt($4*$4+$5*$5)}}' disp_samp.out |\
     awk 'BEGIN{mx=0}{if($1>mx){mx=$1}}END{print mx}' | awk '{print $1}'`
DISP_LBL=`echo $MAX | awk -f vect_label.awk`
VEC_SCALE=`echo $MAX | awk -f vect_scale.awk`
## Plot displacements smaller than DISP_THR faded
#awk '{
#    if (sqrt($4*$4+$5*$5)<'"$DISP_THR"') {
#      print $1,$2,atan2($4,$5)/0.01745,'"$VEC_SCALE"'*sqrt($4*$4+$5*$5)
#    }
#}' disp.out |\
#    gmt psxy $PROJ $LIMS -SV10p+e+a45 -W2p,175/175/175 -K -O >> $PSFILE
## Plot larger displacements in black
#awk '{
#    if (sqrt($4*$4+$5*$5)>='"$DISP_THR"'&&NR!='"$MAXLN"') {
#      print $1,$2,atan2($4,$5)/0.01745,'"$VEC_SCALE"'*sqrt($4*$4+$5*$5)
#    }
#}' disp.out |\
#    gmt psxy $PROJ $LIMS -SV10p+e+a45 -W2p,black -K -O >> $PSFILE
# Scale vector thickness by displacement magnitude
# Plot displacements smaller than DISP_THR faded
awk '{
    if (sqrt($4*$4+$5*$5)<'"$DISP_THR"') {
      print $1,$2,atan2($4,$5)/0.01745,'"$VEC_SCALE"'*sqrt($4*$4+$5*$5)
    }
}' disp_samp.out |\
    gmt psxy $PROJ $LIMS -SV10p+e+a45+n${MAX} -W2p,175/175/175 -K -O >> $PSFILE
# Plot larger displacements in black
awk '{
    if (sqrt($4*$4+$5*$5)>='"$DISP_THR"'&&NR!='"$MAXLN"') {
      print $1,$2,atan2($4,$5)/0.01745,'"$VEC_SCALE"'*sqrt($4*$4+$5*$5)
    }
}' disp_samp.out |\
    gmt psxy $PROJ $LIMS -SV10p+e+a45+n${MAX} -W2p,black -K -O >> $PSFILE


# Legend (all coordinates are in cm from the bottom left)
gmt psxy -JX10c -R0/10/0/10 -W1p -Gwhite -K -O >> $PSFILE << EOF
0.2 0.2
0.2 1.5
`echo $VEC_SCALE $DISP_LBL | awk '{print $1*$2+0.6}'` 1.5
`echo $VEC_SCALE $DISP_LBL | awk '{print $1*$2+0.6}'` 0.2
0.2 0.2
EOF
echo $VEC_SCALE $DISP_LBL |\
    awk '{print 0.4,0.5,0,$1*$2}' |\
    gmt psxy -JX -R -Sv10p+e+a45 -W2p,black -N -K -O >> $PSFILE
echo $VEC_SCALE $DISP_LBL |\
    awk '{if ($2!=1) {print $1*$2*0.5+0.4,1.0,12","0,"CM",$2,"meters"}
          else{print $1*$2*0.5+0.4,1.0,12","0,"CM",$2,"meter"}}' |\
    gmt pstext -JX -R -F+f+j -N -K -O >> $PSFILE
gmt pstext -JX -R -F+f+j -Gwhite -N -K -O >> $PSFILE << EOF
`echo $VEC_SCALE $DISP_LBL | awk '{print $1*$2+0.7}'` 0.2 10,2 LB \
    Displacements less than $DISP_THR m are in light grey
EOF
if [ $SRC_TYPE == "FFM" ]
then
    echo $VEC_SCALE $DISP_LBL $CONT |\
        awk '{
          if($3==1) {print $1*$2+0.7,0.6,"10,2 LB FFM Slip Contours: "$3" meter"}
          else      {print $1*$2+0.7,0.6,"10,2 LB FFM Slip Contours: "$3" meters"}
        }' |\
        gmt pstext -JX -R -F+f+j -N -K -O >> $PSFILE
fi

echo 0 0 | gmt psxy $PROJ $LIMS -O >> $PSFILE

#####
#	CLEAN UP
#####
ps2pdf $PSFILE
rm *.awk
rm polar_mwh.cpt



