#!/bin/bash

###############################################################################
# Script for automatically computing and plotting surface displacements
# generated by an earthquake in an elastic half-space.
###############################################################################

if [ ! -f polar_mwh.cpt ]; then
cat > polar_mwh.cpt << EOF
# Simulates the POLAR colormap in Matlab
# Modified to make small values white
-1	blue	-0.1	white
-0.1	white	0.1	white
0.1	white	1	red
EOF
fi

###############################################################################
# The user can specify the following variables:
#  DISP_THR (Horizontal) displacement threshold for plotting as bold vectors
###############################################################################

# Horizontal displacements below DISP_THR will be faded
DISP_THR="0.05" # meters

# HDEF_DIR="../bin/"
HDEF_DIR=

###############################################################################
#	PARSE COMMAND LINE
###############################################################################
function usage() {
    echo "Usage: surf_disp.sh SRC_TYPE SRC_FILE [...options...]" 1>&2
    echo 1>&2
    echo "Required arguments" 1>&2
    echo "SRC_TYPE            MT, FLT, FFM, or FSP" 1>&2
    echo "SRC_FILE            Name of input fault file" 1>&2
    echo "                      MT:  evlo evla evdp str dip rak mag" 1>&2
    echo "                      FLT: evlo evla evdp str dip rak slip wid len" 1>&2
    echo "                      FFM: finite fault model in USGS .param format" 1>&2
    echo "                      FSP: finite fault model in SRCMOD FSP format" 1>&2
    echo 1>&2
    echo "Customization arguments" 1>&2
    echo "-Rw/e/s/n           Map limits" 1>&2
    echo "-Tvmin/vmax/dv      Specify vertical color bar limits" 1>&2
    echo "-vec_scale SCALE    Horizontal vector scale" 1>&2
    echo "-vec_legend LENGTH  Legend vector length (m)" 1>&2
    echo 1>&2
    echo "Optional arguments" 1>&2
    echo "-nvert N            Number of vertical contour grid points (default: 100/dimension)" 1>&2
    echo "-nvec N             Number of vectors (default: 20/dimension)" 1>&2
    echo "-seg                Plot segmented finite faults" 1>&2
    echo "-novector           Do not plot horizontal vectors" 1>&2
    echo "-gps GPS_FILE       Add observed displacements" 1>&2
    echo "-sta STA_FILE       Add only station locations" 1>&2
    echo "-emprel EMPREL      Empirical relation for rect source" 1>&2
    echo "-o FILENAME         Basename for output file" 1>&2
    echo 1>&2
    exit 1
}

# Source type and source file are required
if [ $# -eq 0 ]
then
    usage
elif [ $# -lt 2 ]
then
    echo "surf_disp.sh: SRC_TYPE and SRC_FILE arguments required" 1>&2
    usage
fi
SRC_TYPE="$1"
SRC_FILE="$2"
shift
shift

# Check that the source type is an available option
if [ $SRC_TYPE != "FFM" -a $SRC_TYPE != "MT" -a $SRC_TYPE != "FSP" -a $SRC_TYPE != "FLT" ]
then
    echo "surf_disp.sh: source type must be FFM, FSP, MT, or FLT" 1>&2
    usage
fi

# Check that input file exists
if [ ! -f $SRC_FILE ]
then
    echo "surf_disp.sh: no source file $SRC_FILE found" 1>&2
    usage
fi

# Parse optional arguments
LIMS=""
VERT_CPT_RANGE=""
VEC_SCALE=""
DISP_LBL=""
NN="100" # Background vertical displacement grid is (NN x NN) points
NN_SAMP="20" # Horizontal vectors grid is (NN_SAMP x NN_SAMP) points
SEG="0"
PLOT_VECT="Y"
GPS_FILE=""
STA_FILE=""
EMPREL="WC"
OFILE="surf_disp"
while [ "$1" != "" ]
do
    case $1 in
        -R*) LIMS="$1";;
        -T*) VERT_CPT_RANGE="$1";;
        -vec_scale) shift;VEC_SCALE="$1" ;;
        -vec_legend) shift;DISP_LBL="$1" ;;
        -nvert) shift;NN="$1";;
        -nvec) shift;NN_SAMP="$1";;
        -seg) SEG="1" ;;
        -novec*) PLOT_VECT="N" ;;
        -gps) shift;GPS_FILE="$1" ;;
        -sta) shift;STA_FILE="$1" ;;
        -emprel) shift;EMPREL="$1";;
        -o) shift;OFILE="$1" ;;
        *) echo "surf_disp.sh: no option \"$1\"" 1>&2; usage;;
    esac
    shift
done

PSFILE="$OFILE.ps"


###############################################################################
# The appearance of displacements plotted on the map is controlled by awk
# commands created within this script. To adjust the coloring, scaling and
# labeling on the figure, adjust these awk commands as necessary.
###############################################################################

# Define the value at which the color bar for vertical displacements
# will saturate, based on maximum vertical displacements.
# IF (MAXIMUM VERTICAL DISPLACEMENT >= THRESHOLD) {USE THIS SATURATION VALUE}
cat > vert_scale_max.awk << EOF
{
  if (\$1>=2) {print 1}
  else if (\$1>=1) {print 0.5}
  else if (\$1>=0.5) {print 0.2}
  else if (\$1>=0.2) {print 0.1}
  else if (\$1>=0.1) {print 0.05}
  else if (\$1>=0.05) {print 0.02}
  else if (\$1>=0.02) {print 0.01}
  else if (\$1>=0.01) {print 0.005}
  else if (\$1>=0.005) {print 0.002}
  else {print 0.001}
}
EOF

# Define the annotation increment for the vertical displacement scale bar,
# based on the saturation value above.
# IF (MAXIMUM VERTICAL DISPLACEMENT >= THRESHOLD) {USE THIS ANNOTATION INCREMENT}
cat > vert_scale_lbl.awk << EOF
{
  if (\$1>=2) {print 1}
  else if (\$1>=1) {print 0.5}
  else if (\$1>=0.5) {print 0.2}
  else if (\$1>=0.2) {print 0.1}
  else if (\$1>=0.1) {print 0.05}
  else if (\$1>=0.05) {print 0.02}
  else if (\$1>=0.02) {print 0.01}
  else if (\$1>=0.01) {print 0.005}
  else if (\$1>=0.005) {print 0.002}
  else {print 0.001}
}
EOF

# Use the maximum horizontal displacement to define the length of the
# vector in the legend.
# IF (MAXIMUM HORIZONTAL DISPLACEMENT >= THRESHOLD) {USE THIS LENGTH IN METERS AS LEGEND VECTOR}
cat > vect_label.awk << EOF
{
  if (\$1>10) {print 5}
  else if (\$1>5) {print 2}
  else if (\$1>1) {print 1}
  else if (\$1>0.5) {print 0.5}
  else if (\$1>0.1) {print 0.1}
  else {print 0.05}
}
EOF

# Use the maximum horizontal displacement to define the vector scaling.
# Larger earthquakes should have a smaller scale factor for all of the
# vectors to fit on the map.
# IF (MAXIMUM HORIZONTAL DISPLACEMENT >= THRESHOLD) {USE THIS VECTOR SCALING}
cat > vect_scale.awk << EOF
{
  if (\$1>10) {print 0.3}
  else if (\$1>5) {print 0.8}
  else if (\$1>1) {print 1.6}
  else if (\$1>0.5) {print 3.2}
  else {print 5}
}
EOF

###############################################################################
###############################################################################
# Everything below this point should be automated. This script requires the
# tools O92UTIL, GRID, and FF2GMT from Matt's codes, and creates the figure
# using GMT 5 commands. All of the work is performed in the same directory
# that the script is run from.
###############################################################################
###############################################################################

#####
#	INPUT FILES FOR DISPLACEMENT CALCULATION
#####
# Copy source file to temporary file
cp $SRC_FILE ./source.tmp

# Elastic half-space properties
LAMDA="4e10"   # Lame parameter
MU="4e10"      # Shear modulus
echo "lame $LAMDA shearmod $MU" > haf.tmp

#####
#	SET UP COMPUTATION GRID
#####
Z="0.0" # Depth is zero on the surface
if [ -z $LIMS ]
then
    # Use "-auto" option in O92UTIL to get rough map limits
    D="10"  # Large initial increment, to get map limits without taking much time
    if [ $SRC_TYPE == "FFM" ]
    then
        ${HDEF_DIR}o92util -ffm source.tmp -auto $Z $D -haf haf.tmp -disp disp.tmp
    elif [ $SRC_TYPE == "FSP" ]
    then
        ${HDEF_DIR}o92util -fsp source.tmp -auto $Z $D -haf haf.tmp -disp disp.tmp
    elif [ $SRC_TYPE == "MT" ]
    then
        ${HDEF_DIR}o92util -mag source.tmp -auto $Z $D -haf haf.tmp -disp disp.tmp
    elif [ $SRC_TYPE == "FLT" ]
    then
        ${HDEF_DIR}o92util -flt source.tmp -auto $Z $D -haf haf.tmp -disp disp.tmp
    else
        echo "surf_disp.sh: no source type named \"$SRC_TYPE\"" 1>&2
        usage
    fi

    W=`gmt gmtinfo -C disp.tmp | awk '{print $1}'`
    E=`gmt gmtinfo -C disp.tmp | awk '{print $2}'`
    S=`gmt gmtinfo -C disp.tmp | awk '{print $3}'`
    N=`gmt gmtinfo -C disp.tmp | awk '{print $4}'`
    echo "Starting map limits: $W $E $S $N"

    # Determine if map has decent aspect ratio and correct as necessary
    # Mercator projection x and y lengths
    X=`echo $W $E | awk '{print $2-$1}'`
    Y=`echo $S $N |\
       awk '{
         v2 = log(sin(3.14159/4+$2/2*0.01745)/cos(3.14159/4+$2/2*0.01745))
         v1 = log(sin(3.14159/4+$1/2*0.01745)/cos(3.14159/4+$1/2*0.01745))
         print v2-v1
       }' |\
       awk '{print $1/0.017}'`

    # Check map aspect ratio (no skinnier than 1.4:1)
    FIX=`echo $X $Y |\
         awk '{
           if ($1>1.4*$2) {print "fixx"}
           else if ($2>1.4*$1) {print "fixy"}
           else {print 1}
         }'`

    # Reduce map limits in long dimension
    if [ $FIX == "fixx" ]
    then
        NEW=`echo $W $E $Y | awk '{print 0.5*($1+$2)-$3*0.70,0.5*($1+$2)+$3*0.70}'`
        W=`echo $NEW | awk '{print $1}'`
        E=`echo $NEW | awk '{print $2}'`
    elif [ $FIX == "fixy" ]
    then
        NEW=`echo $S $N $X $Y |\
             awk '{print 0.5*($1+$2)-0.7*$3/$4*($2-$1),0.5*($1+$2)+0.7*$3/$4*($2-$1)}'`
        S=`echo $NEW | awk '{print $1}'`
        N=`echo $NEW | awk '{print $2}'`
    fi
    # Round map limits to nearest 0.1
    W=`echo "$W $E" | awk '{printf("%.1f"),$1}'`
    E=`echo "$W $E" | awk '{printf("%.1f"),$2}'`
    S=`echo "$S $N" | awk '{printf("%.1f"),$1}'`
    N=`echo "$S $N" | awk '{printf("%.1f"),$2}'`
    echo "Final map limits:    $W $E $S $N"

else
    # Use map limits specified on command line
    W=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $1}'`
    E=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $2}'`
    S=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $3}'`
    N=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $4}'`
    echo "Using map limits from command line: $W $E $S $N"
fi


# Locations of displacement computations
${HDEF_DIR}grid -x $W $E -nx $NN -y $S $N -ny $NN -z $Z -o sta.tmp
if [ -z $GPS_FILE ]
then
    # Create (NN x NN) point horizontal grid for vectors
    ${HDEF_DIR}grid -x $W $E -nx $NN_SAMP -y $S $N -ny $NN_SAMP -z $Z -o sta_samp.tmp
else
    # Take points from GPS file for vectors
    awk '{print $1,$2,0}' $GPS_FILE > sta_samp.tmp
fi

#####
#	COMPUTE SURFACE DISPLACEMENTS
#####
if [ $SRC_TYPE == "FFM" ]
then
    ${HDEF_DIR}o92util -ffm source.tmp -sta sta.tmp -haf haf.tmp -disp disp.tmp -prog
    ${HDEF_DIR}o92util -ffm source.tmp -sta sta_samp.tmp -haf haf.tmp -disp disp_samp.tmp -prog
elif [ $SRC_TYPE == "FSP" ]
then
    ${HDEF_DIR}o92util -fsp source.tmp -sta sta.tmp -haf haf.tmp -disp disp.tmp -prog
    ${HDEF_DIR}o92util -fsp source.tmp -sta sta_samp.tmp -haf haf.tmp -disp disp_samp.tmp -prog
elif [ $SRC_TYPE == "MT" ]
then
    ${HDEF_DIR}o92util -mag source.tmp -sta sta.tmp -haf haf.tmp -disp disp.tmp -prog -empirical ${EMPREL}
    ${HDEF_DIR}o92util -mag source.tmp -sta sta_samp.tmp -haf haf.tmp -disp disp_samp.tmp -prog -empirical $EMPREL
elif [ $SRC_TYPE == "FLT" ]
then
    ${HDEF_DIR}o92util -flt source.tmp -sta sta.tmp -haf haf.tmp -disp disp.tmp -prog
    ${HDEF_DIR}o92util -flt source.tmp -sta sta_samp.tmp -haf haf.tmp -disp disp_samp.tmp -prog
else
    echo "surf_disp.sh: no source type named $SRC_TYPE" 1>&2
    usage
fi

# Extract maximum vertical displacements and determine scale parameters for gridding
MINMAX=`awk '{print $6}' disp.tmp |\
        awk 'BEGIN{mn=1e10;mx=-1e10}{
            if($1<mn){mn=$1}
            if($1>mx){mx=$1}
        }END{print mn,mx}'`
V1=`echo $MINMAX | awk '{if($1<0){print -$1}else{print $1}}'`
V2=`echo $MINMAX | awk '{if($2<0){print -$2}else{print $2}}'`
T=`echo $V1 $V2 | awk '{if($1>$2){print $1}else{print $2}}' | awk -f vert_scale_max.awk`
DT=`echo $T | awk -f vert_scale_lbl.awk`

#####
#	PLOT RESULTS
#####
gmt set PS_MEDIA 8.5ix11i
PORTRAIT=`echo $X $Y | awk '{if($1<$2){print "-P"}}'`
PROJ="-JM5i $PORTRAIT"
LIMS="-R$W/$E/$S/$N"

# Colored grid of vertical displacements plotted under horizontal displacement vectors
if [ -z $VERT_CPT_RANGE ]
then
    gmt makecpt -T-${T}/${T}/0.01 -C./polar_mwh.cpt -D > vert.cpt
else
    gmt makecpt $VERT_CPT_RANGE -C./polar_mwh.cpt -D > vert.cpt
    DT=`echo $VERT_CPT_RANGE | awk -F/ '{print $2/2}'`
fi
awk '{print $1,$2,$6}' disp.tmp | gmt xyz2grd -Gvert.grd $LIMS -I${NN}+/${NN}+
gmt grdimage vert.grd $PROJ $LIMS -Cvert.cpt -Y1.5i -K > $PSFILE
gmt psscale -D0i/-0.9i+w5.0i/0.2i+h+ml -Cvert.cpt -Ba$DT -Bg$DT -B+l"Vertical Displacement (m)" -K -O >> $PSFILE

# Map stuff
ANNOT=`echo $W $E | awk '{if($2-$1<=10){print 1}else{print 2}}'`
gmt psbasemap $PROJ $LIMS -Bxa${ANNOT} -Bya1 -BWeSn -K -O --MAP_FRAME_TYPE=plain >> $PSFILE

echo "Just a heads up - Ghostscript 9.24 no longer supports however GMT defines transparency" 1>&2
echo "Ghostscript 9.23-1 still works fine for me with transparency" 1>&2
gmt pscoast $PROJ $LIMS -W1p,105/105/105 -G205/205/205 -N1/0.5p -Dh -K -O -t85 >> $PSFILE

# Plot FFM slip contours
if [ $SRC_TYPE == "FFM" -o $SRC_TYPE == "FSP" ]
then
    case $SRC_TYPE in
        FFM) OPT="-ffm source.tmp";;
        FSP) OPT="-fsp source.tmp";;
    esac
    if [ $SEG -eq 0 ]
    then
        ${HDEF_DIR}ff2gmt $OPT -slip slip.tmp -clip clip.tmp -epi epi.tmp
    else
        ${HDEF_DIR}ff2gmt $OPT -slip slip.tmp -clipseg clip.tmp -epi epi.tmp
    fi
    MAXSLIP=`awk '{print $3}' slip.tmp |\
             awk 'BEGIN{mx=0}{if($1>mx){mx=$1}}END{print mx}' |\
             awk '{print $1}'`
    CONT=`echo $MAXSLIP |\
          awk '{
            if ($1>=50) {print 10}
            else if ($1>=20) {print 5}
            else if ($1>=10) {print 2}
            else if ($1>=2) {print 1}
            else {print 0.5}
          }'`
    echo $CONT $MAXSLIP | awk '{for (i=$1;i<=$2;i=i+$1){print i,"C"}}' > junk
    awk '{print $1,$2,$3}' slip.tmp |\
        gmt surface -Gslip.grd -I0.10/0.10 -Tb1 -Ti0.25 $LIMS
    gmt psclip clip.tmp $PROJ $LIMS -K -O >> $PSFILE
    gmt grdcontour slip.grd $PROJ $LIMS -W1p,205/205/205 -Cjunk -K -O -t40 >> $PSFILE
    gmt psclip -C -K -O >> $PSFILE
    gmt psxy clip.tmp $PROJ $LIMS -W1p,205/205/205 -K -O -t40 >> $PSFILE
    rm junk
else
    echo
    # awk '{print $1,$2,$4,$5,$6}' rect.out |\
    #     gmt psxy $PROJ $LIMS -SJ -W1p,205/205/205 -K -O -t40 >> $PSFILE
fi

# Plot epicenter
if [ $SRC_TYPE == "FFM" -o $SRC_TYPE == "FSP" ]
then
    LONX=`awk '{print $1}' epi.tmp`
    LATX=`awk '{print $2}' epi.tmp`
    echo $LONX $LATX |\
        gmt psxy $PROJ $LIMS -Sa0.15i -W1p,55/55/55 -K -O -t50 >> $PSFILE
fi

if [ $PLOT_VECT == "Y" ]
then
    if [ -z $GPS_FILE ]
    then
        # If max displacement is much larger than other displacements, don't use it
        MAXLN=`awk '{print sqrt($4*$4+$5*$5)}' disp_samp.tmp |\
               awk 'BEGIN{m1=0;m2=0}
                    {if($1>m1){m2=m1;m1=$1;ln=NR}}
                    END{if(m1>2*m2){print ln}else{print 0}}'`
    else
        MAXLN=0
    fi
    # Scale vectors differently depending on maximum horizontal displacement
    MAX=`awk '{if(NR!='"$MAXLN"'){print sqrt($4*$4+$5*$5)}}' disp_samp.tmp |\
         awk 'BEGIN{mx=0}{if($1>mx){mx=$1}}END{print mx}' | awk '{print $1}'`
    if [ -z $DISP_LBL ]
    then
        DISP_LBL=`echo $MAX | awk -f vect_label.awk`
    fi
    if [ -z $VEC_SCALE ]
    then
        VEC_SCALE=`echo $MAX | awk -f vect_scale.awk`
    fi
    MAX=0.5
    # Plot differently depending on whether data are grid or GPS
    if [ -z $GPS_FILE ]
    then
        # Plot displacements smaller than DISP_THR faded
        awk '{
            if (sqrt($4*$4+$5*$5)<'"$DISP_THR"') {
              print $1,$2,atan2($4,$5)/0.01745,'"$VEC_SCALE"'*sqrt($4*$4+$5*$5)
            }
        }' disp_samp.tmp |\
            gmt psxy $PROJ $LIMS -SV10p+e+a45+n${MAX} -W2p,175/175/175 -K -O >> $PSFILE
        # Plot larger displacements in black
        awk '{
            if (sqrt($4*$4+$5*$5)>='"$DISP_THR"'&&NR!='"$MAXLN"') {
              print $1,$2,atan2($4,$5)/0.01745,'"$VEC_SCALE"'*sqrt($4*$4+$5*$5)
            }
        }' disp_samp.tmp |\
            gmt psxy $PROJ $LIMS -SV10p+e+a45+n${MAX} -W2p,black -K -O >> $PSFILE
    else
        # Color vertical motions same as background synthetic verticals
        awk '{print $1,$2,$5}' $GPS_FILE | gmt psxy $PROJ $LIMS -Sc0.06i -W0.5p -Cvert.cpt -K -O >> $PSFILE
        awk '{if(NF==6)print $1,$2,"4,0 LM",$6}' $GPS_FILE |\
            gmt pstext $PROJ $LIMS -F+f+j -D0.04i/0 -K -O >> $PSFILE
        # Plot horizontal GPS displacements in black
        awk '{print $1,$2,atan2($3,$4)/0.01745,'"$VEC_SCALE"'*sqrt($3*$3+$4*$4)}' $GPS_FILE |\
            gmt psxy $PROJ $LIMS -SV10p+e+a45+n${MAX} -W2p,black -K -O >> $PSFILE
        # Plot synthetic displacements in another color
        awk '{print $1,$2,atan2($4,$5)/0.01745,'"$VEC_SCALE"'*sqrt($4*$4+$5*$5)}' disp_samp.tmp |\
            gmt psxy $PROJ $LIMS -SV10p+e+a45+n${MAX} -W2p,orange -K -O >> $PSFILE
    fi
fi
if [ "$STA_FILE" != "" ]
then
    gmt psxy $STA_FILE $PROJ $LIMS -Sc0.06i -Ggreen -W0.5p -K -O >> $PSFILE
fi


# Legend (all coordinates are in cm from the bottom left)
if [ $PLOT_VECT == "Y" ]
then
    echo 0.2 0.2 > legend.tmp
    echo 0.2 1.5 >> legend.tmp
    echo $VEC_SCALE $DISP_LBL | awk '{print $1*$2+0.6,1.5}' >> legend.tmp
    echo $VEC_SCALE $DISP_LBL | awk '{print $1*$2+0.6,0.2}' >> legend.tmp
    echo 0.2 0.2 >> legend.tmp
    gmt psxy legend.tmp -JX10c -R0/10/0/10 -W1p -Gwhite -K -O >> $PSFILE
    echo $VEC_SCALE $DISP_LBL |\
        awk '{print 0.4,0.5,0,$1*$2}' |\
        gmt psxy -JX -R -Sv10p+e+a45 -W2p,black -N -K -O >> $PSFILE
    echo $VEC_SCALE $DISP_LBL |\
        awk '{if ($2!=1) {print $1*$2*0.5+0.4,1.0,12","0,"CM",$2,"meters"}
              else{print $1*$2*0.5+0.4,1.0,12","0,"CM",$2,"meter"}}' |\
        gmt pstext -JX -R -F+f+j -N -K -O >> $PSFILE
    if [ -z $GPS_FILE ]
    then
        echo $VEC_SCALE $DISP_LBL |\
            awk '{print $1*$2+0.7,"0.2 10,2 LB Displacements less than '"$DISP_THR"' m are in light grey"}' |\
            gmt pstext -JX -R -F+f+j -Gwhite -N -K -O >> $PSFILE
    else
        echo $VEC_SCALE $DISP_LBL |\
            awk '{print $1*$2+0.7,"0.2 10,2 LB Observed=black; Synthetic=color"}' |\
            gmt pstext -JX -R -F+f+j -Gwhite -N -K -O >> $PSFILE
    fi
else
    VEC_SCALE=0
    DISP_LBL=0
fi

if [ $SRC_TYPE == "FFM" -o $SRC_TYPE == "FSP" ]
then
    echo $VEC_SCALE $DISP_LBL $CONT |\
        awk '{
          if($3==1) {print $1*$2+0.7,0.6,"10,2 LB FFM Slip Contours: "$3" meter"}
          else      {print $1*$2+0.7,0.6,"10,2 LB FFM Slip Contours: "$3" meters"}
        }' |\
        gmt pstext -JX10c -R0/10/0/10 -F+f+j -N -K -O >> $PSFILE
fi

echo 0 0 | gmt psxy $PROJ $LIMS -O >> $PSFILE

#####
#	CLEAN UP
#####
ps2pdf $PSFILE
#psconvert $PSFILE -Tf
rm *.awk
rm *.cpt
rm gmt.*
rm *.tmp
rm *.grd
rm $PSFILE
