#!/bin/bash

###############################################################################
# Script for computing and plotting Coulomb stress changes generated by an
# earthquake in an elastic half-space on a vertical cross-section perpendicular
# to the strike of the earthquake.
###############################################################################


###############################################################################
#	PARSE COMMAND LINE
###############################################################################
function usage() {
    echo "Usage: coul_xsec.sh SRC_TYPE SRC_FILE [...options...]" 1>&2
    echo 1>&2
    echo "Required arguments" 1>&2
    echo "SRC_TYPE            MT, FLT, FFM, or FSP" 1>&2
    echo "SRC_FILE            Name of input fault file"
    echo "                      MT:  evlo evla evdp str dip rak mag" 1>&2
    echo "                      FLT: evlo evla evdp str dip rak slip wid len" 1>&2
    echo "                      FFM: finite fault model in USGS .param format" 1>&2
    echo "                      FSP: finite fault model in SRCMOD FSP format" 1>&2
    echo 1>&2
    echo "Optional arguments (many of these defined automatically)" 1>&2
    echo "-Rpmn/pmx/zmn/zmx   Cross-section limits" 1>&2
    echo "-trg S/D/R          Target fault strike/dip/rake" 1>&2
    echo "-fric FRIC          Effective fault friction (default: 0.4)" 1>&2
    echo "-xsec LON0/LAT0/AZ  Define cross-section plane" 1>&2
    echo "-slipthr THR        FFM slip threshold (fraction of max)" 1>&2
    echo "-n NN               Number of stress contour grid points (default: 100/dimension)" 1>&2
    echo "-seg                Plot segmented finite faults" 1>&2
    echo "-emprel EMPREL      Empirical relation for rect source" 1>&2
    echo "-o FILENAME         Basename for output file" 1>&2
    echo "-noclean            Keep all temporary files (useful for debugging)"
    echo 1>&2
    exit 1
}
# Source type and source file are required
if [ $# -eq 0 ]
then
    usage
elif [ $# -lt 2 ]
then
    echo "coul_xsec.sh: SRC_TYPE and SRC_FILE arguments required" 1>&2
    usage
fi
SRC_TYPE="$1"
SRC_FILE="$2"
shift
shift

# Check that the source type is an available option
if [ $SRC_TYPE != "FFM" -a $SRC_TYPE != "MT" -a $SRC_TYPE != "FSP" -a $SRC_TYPE != "FLT" ]
then
    echo "coul_xsec.sh: source type must be FFM, FSP, MT, or FLT" 1>&2
    usage
fi

# Check that input file exists
if [ ! -f $SRC_FILE ]
then
    echo "coul_xsec.sh: no source file $SRC_FILE found" 1>&2
    usage
fi


# Parse optional arguments
LIMS=""
NN="100"
TSTR=""
TDIP=""
TRAK=""
FRIC="0.4"
LON0=""
LAT0=""
AZ=""
SEG="0"
EMPREL="WC"
OFILE="coul_xsec"
THR="0.15"
CLEAN="Y"
while [ "$1" != "" ]
do
    case $1 in
        -R*) LIMS="$1";;
        -trg) shift
              TSTR=`echo $1 | awk -F"/" '{print $1}'`
              TDIP=`echo $1 | awk -F"/" '{print $2}'`
              TRAK=`echo $1 | awk -F"/" '{print $3}'`;;
        -fric) shift; FRIC=$1;;
        -xsec) shift
               LON0=`echo $1 | awk -F"/" '{print $1}'`
               LAT0=`echo $1 | awk -F"/" '{print $2}'`
               AZ=`echo $1 | awk -F"/" '{print $3}'`;;
        -slipthr) shift; THR=$1;;
        -seg) SEG="1" ;;
        -n) shift;NN=$1;NN=$(echo $NN | awk '{printf("%d"),$1}');;
        -emprel) shift;EMPREL="$1";;
        -o) shift;OFILE="$1" ;;
        -noclean) CLEAN="N";;
        *) echo "coul_xsec.sh: no option \"$1\"" 1>&2; usage;;
    esac
    shift
done

PSFILE="$OFILE.ps"



###############################################################################
#	CHECK FOR REQUIRED EXECUTABLES
###############################################################################

# Check for executables in user-specified directory, if defined
if [ "$HDEF_BIN_DIR" != "" ]
then
    BIN_DIR=$(which $HDEF_BIN_DIR/o92util | xargs dirname)
    if [ "$BIN_DIR" == "" ]
    then
        echo "coul_xsec.sh: executables not found in user-specified HDEF_BIN_DIR=$HDEF_BIN_DIR" 1>&2
        echo "Searching in other locations..." 1>&2
    fi
fi

# Check if o92util is set in PATH
if [ "$BIN_DIR" == "" ]
then
    BIN_DIR=$(which o92util | xargs dirname)
fi

# Check for o92util in same directory as script
if [ "$BIN_DIR" == "" ]
then
    BIN_DIR=$(which $(dirname $0)/o92util | xargs dirname)
fi

# Check for o92util in relative directory ../bin (assumes script is in Hdef/dir)
if [ "$BIN_DIR" == "" ]
then
    BIN_DIR=$(which $(dirname $0)/../bin/o92util | xargs dirname)
fi

# Check for o92util in relative directory ../build (assumes script is in Hdef/dir)
if [ "$BIN_DIR" == "" ]
then
    BIN_DIR=$(which $(dirname $0)/../build/o92util | xargs dirname)
fi

# Hdef executables are required for this script!
if [ "$BIN_DIR" == "" ]
then
    echo "coul_xsec.sh: unable to find Hdef executables; exiting" 1>&2
    exit 1
fi

# GMT executables are required for this script!
GMT_DIR=$(which gmt | xargs dirname)
if [ "$GMT_DIR" == "" ]
then
    echo "coul_xsec.sh: unable to find GMT executables; exiting" 1>&2
    exit 1
fi


###############################################################################
#	CLEAN UP FUNCTION
###############################################################################
function cleanup () {
    rm -f no_green_mwh.cpt
    rm -f coul.cpt
    rm -f coul_mpa.cpt
    rm -f coul.grd
    rm -f gmt.*
    rm -f *.tmp
}
if [ "$CLEAN" == "Y" ]
then
    trap "cleanup" 0 1 2 3 8 9
fi


###############################################################################
###############################################################################
# Everything below this point should be automated. This script requires the
# tools O92UTIL and GRID from Matt's codes, and creates the figure using
# GMT 5 commands. All of the work is performed in the same directory that
# the script is run from.
###############################################################################
###############################################################################

###############################################################################
#	DEFINE APPEARANCE OF STRESS CONTOURS
###############################################################################
# Coulomb stress color palette
# cat > no_green_mwh.cpt << EOF
# # Color table using in Lab for Satellite Altimetry
# # For folks who hate green in their color tables
# # Designed by W.H.F. Smith, NOAA
# # Modified to make small values white
# -32	32/96/255	-28	32/96/255
# -28	32/159/255	-24	32/159/255
# -24	32/191/255	-20	32/191/255
# -20	0/207/255	-16	0/207/255
# -16	42/255/255	-12	42/255/255
# -12	85/255/255	-8	85/255/255
# -8	127/255/255	-3.2	127/255/255
# -3.2	255/255/255	0	255/255/255
# 0	255/255/255	3.2	255/255/255
# 3.2	255/240/0	8	255/240/0
# 8	255/191/0	12	255/191/0
# 12	255/168/0	16	255/168/0
# 16	255/138/0	20	255/138/0
# 20	255/112/0	24	255/112/0
# 24	255/77/0	28	255/77/0
# 28	255/0/0		32	255/0/0
# B	32/96/255
# F	255/0/0
# EOF
$BIN_DIR/colortool -hue 270,180 -chroma 40,0 -lightness 40,100 -gmt -T-1e6/0/1e5 > no_green_mwh.cpt
$BIN_DIR/colortool -hue 100,10 -chroma 100,30 -lightness 100,50 -gmt -T0/1e6/1e5 >> no_green_mwh.cpt


#####
#	INPUT FILES FOR DISPLACEMENT CALCULATION
#####
# Copy source file to temporary file
cp $SRC_FILE ./source.tmp || { echo "coul_xsec.sh: error copying EQ source file" 1>&2; exit 1; }

# Elastic half-space properties
LAMDA="4e10" # Lame parameter
MU="4e10"    # Shear modulus
echo "Lame $LAMDA $MU" > haf.dat


# If kinematics or plane geometry are given on the command line, use them for stress calculation
# Otherwise, use the slip*area-weighted average values from the source
if [ "$TRAK" == "" -o "$AZ" == "" ]
then
    if [ $SRC_TYPE == "FFM" ]
    then
        $BIN_DIR/ff2gmt -ffm source.tmp -flt flt.tmp || exit 1
    elif [ $SRC_TYPE == "FSP" ]
    then
        $BIN_DIR/ff2gmt -fsp source.tmp -flt flt.tmp || exit 1
    elif [ $SRC_TYPE == "MT" ]
    then
        awk '{print $7}' source.tmp | $BIN_DIR/mtutil -mag -mom mom.tmp || exit 1
        paste source.tmp mom.tmp | awk '{print $1,$2,$3,$4,$5,$6,$8,1,1}' > flt.tmp
    elif [ $SRC_TYPE == "FLT" ]
    then
        cp source.tmp flt.tmp
    fi
fi

# Calculate target strike/dip/rake from FFM if needed
if [ "$TRAK" != "" ]
then
    echo "Using target kinematics from the command line: str=$TSTR dip=$TDIP rak=$TRAK"
else
    if [ ! -f flt.tmp ]; then echo "$0: flt.tmp is required, but not created; this is a problem in the script" 1>&2; exit 1; fi

    # Calculate slip*area
    awk '{print $7*$8*$9}' flt.tmp > mom.tmp

    # Convert strike/dip/rake to moment tensor components
    awk '{print $4,$5,$6}' flt.tmp | $BIN_DIR/mtutil -sdr -mij mij.tmp || exit 1

    # Weight moment tensor components by slip*area and compute weighted mean strike/dip/rake
    paste mij.tmp mom.tmp |\
        awk '{print $1*$7,$2*$7,$3*$7,$4*$7,$5*$7,$6*$7}' |\
        awk 'BEGIN{rr=0;tt=0;pp=0;rt=0;rp=0;tp=0}{
            rr += $1
            tt += $2
            pp += $3
            rt += $4
            rp += $5
            tp += $6
        }END{print rr,tt,pp,rt,rp,tp}' |\
        $BIN_DIR/mtutil -mij -sdr sdr.tmp || exit 1

     # Finally, compute the average FFM strike to determine which target nodal plane to select
     MEAN_STR=$(awk 'BEGIN{sx=0;sy=0;d2r=3.14159265/180}{
                    sx+=sin($4*d2r)
                    sy+=cos($4*d2r)
                }END{print atan2(sx,sy)/d2r}' flt.tmp)
     awk 'BEGIN{d2r=3.14159265/180}{
         ffm_strx_1 = sin($1*d2r)
         ffm_stry_1 = cos($1*d2r)
         ffm_strx_2 = sin($4*d2r)
         ffm_stry_2 = cos($4*d2r)
         mean_strx = sin('"$MEAN_STR"'*d2r)
         mean_stry = cos('"$MEAN_STR"'*d2r)
         dp1 = ffm_strx_1*mean_strx + ffm_stry_1*mean_stry
         dp2 = ffm_strx_2*mean_strx + ffm_stry_2*mean_stry
         if (dp1>dp2) {
             print $1,$2,$3
         } else {
             print $4,$5,$6
         }
     }' sdr.tmp > j; mv j sdr.tmp

     # Save new strike, dip, and rake
     TSTR=$(awk '{printf("%.0f"),$1}' sdr.tmp)
     TDIP=$(awk '{printf("%.0f"),$2}' sdr.tmp)
     TRAK=$(awk '{printf("%.0f"),$3}' sdr.tmp)

    echo "Calculated target kinematics from the source fault: str=$TSTR dip=$TDIP rak=$TRAK"
fi
echo $TSTR $TDIP $TRAK $FRIC > trg.tmp


# Calculate cross-section plane from FFM if not specified
if [ "$Z0" != "" ]
then
    echo "Using cross-section plane from command line: lon=$LON0 lat=$LAT0 dep=$Z0"

else
    if [ ! -f flt.tmp ]; then echo "$0: flt.tmp is required, but not created; this is a problem in the script" 1>&2; exit 1; fi

    # Calculate slip*area
    awk '{print $7*$8*$9}' flt.tmp > mom.tmp

    # Weight lon, lat, and depth by slip*area and compute weighted mean values
    LON0=$(paste flt.tmp mom.tmp | awk 'BEGIN{lo=0;m=0}{lo+=$1*$8;m+=$8}END{printf("%.1f"),lo/m}')
    LAT0=$(paste flt.tmp mom.tmp | awk 'BEGIN{la=0;m=0}{la+=$2*$8;m+=$8}END{printf("%.1f"),la/m}')
    Z0=$(paste flt.tmp mom.tmp | awk 'BEGIN{z=0;m=0}{z+=$3*$8;m+=$8}END{printf("%.1f"),z/m}')

    echo "Calculated reference point from the source fault: lon=$LON0 lat=$LAT0 dep=$Z0"
fi


#####
#       SET UP COMPUTATION GRID
#####
# Cross-section limits
if [ -z $LIMS ]
then
    if [ $SRC_TYPE == "FFM" ]
    then
        MAXSLIP=`awk '{if(substr($1,1,1)!="#"&&NF>3){print $4}}' ffm.dat |\
                 gmtinfo -C -I1 | awk '{print $2/100}'`
    else
        MAXSLIP=`awk '{print ((10^(1.5*($7+10.7)))*1e-7/4e10*1e-6)^(1/3)/4}' mt.dat |\
                 gmtinfo -C -I1 | awk '{print $2}'`
    fi
    MX=`echo $MAXSLIP | awk '{print 200+$1*15}' |\
        gmtinfo -C -I50 | awk '{if($2>750){print 750}else{print $2}}'`
    L="-$MX"
    R="$MX"
    B=`echo $Z | awk '{if($1>75){print $1+75}else{print 150}}'`
    T=`echo $Z | awk '{if($1>75){print $1-75}else{print 0}}'`
else
    L=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $1}'`
    R=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $2}'`
    T=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $3}'`
    B=`echo $LIMS | sed -e "s/\// /g" -e "s/-R//" | awk '{print $4}'`
    T=`echo $T $B | awk '{if($1>$2){print $2,$1}else{print $1,$2}}'`
    B=`echo $T | awk '{print $2}'`
    T=`echo $T | awk '{print $1}'`
    echo "Using map limits from command line: $L $R $T $B"
fi

# Create (NNX x NNY) point cross-section grid
grid -x $L $R -nx $NNX -y $T $B -ny $NNY -xsec $LON0 $LAT0 $AZ -o sta.dat
grid -x $L $R -nx $NNX -y $T $B -ny $NNY -xsec $LON0 $LAT0 $AZ -o staxz.dat -xz

#####
#	COMPUTE COULOMB STRESS CHANGE
#####
if [ $SRC_TYPE == "FFM" ]
then
    o92util -ffm ffm.dat -sta sta.dat -haf haf.dat -trg trg.dat -coul coul.out -prog
else
    o92util -mag mt.dat -sta sta.dat -haf haf.dat -trg trg.dat -coul coul.out -prog -gmt rect.out
fi

#####
#	PLOT RESULTS
#####
SCL="0.010"
WID=`echo $L $R $SCL | awk '{print ($2-$1)*$3}'`
PROJ="-Jx${SCL}i/-${SCL}i"
LIMS="-R$L/$R/$T/$B"

# Colored grid of Coulomb stress changes
gmt makecpt -T-1e5/1e5/1e4 -C./no_green_mwh.cpt -D > coul.cpt
gmt makecpt -T-1e-1/1e-1/1e-2 -C./no_green_mwh.cpt -D > coul2.cpt
paste staxz.dat coul.out | awk '{print $1,$2,$6}' |\
    gmt xyz2grd -Gcoul.grd $LIMS -I$NNX+/$NNY+
gmt grdimage coul.grd $PROJ $LIMS -Ccoul.cpt -Y2.5i -K > $PSFILE
gmt psscale -D`echo $WID | awk '{print $1/2}'`i/-0.6i/5.0i/0.2ih -Ccoul2.cpt -Ba0.05 -Bg0.01 \
    -B+l"Coulomb Stress Change (MPa)" -Al -K -O >> $PSFILE

# Map stuff
if [ $TXT == "e" ]
then
    XTXT="Distance from Epicenter (km)"
elif [ $TXT == "p"  ]
then
    XTXT="Distance from Peak Slip Location (km)"
else
    XTXT="Distance from \(${LAT0}N,${LON0}E\) (km)"
fi
ANNOT=`echo $R | awk '{if($1<=300){print 50}else{print 100}}'`
gmt psbasemap $PROJ $LIMS -Bxa${ANNOT} -Bya50 -BWesN -K -O \
    -Bx+l"$XTXT" -By+l"Depth (km)" >> $PSFILE

# Plot cross-section of earthquake fault
if [ $SRC_TYPE == "FFM" ]
then
    awk '{if (substr($1,1,1)!="#" && NF>3) print $2,$1,$3}' ffm.dat |\
      gmt project -C$LON0/$LAT0 -A$AZ -Fpz -Q |\
      sort -g |\
      gmt psxy $PROJ $LIMS -W2p,white -K -O -t30 >> $PSFILE
else
    if [ $DIPD == "L" ]
    then
    gmt psxy $PROJ $LIMS -W2p,white -K -O -t30 >> $PSFILE << EOF
      `awk '{print $6*0.5,'"$Z"'-$6*0.5*sin('"$TDIP"'*0.01745)/cos('"$TDIP"'*0.01745)}' rect.out`
      0 $Z
      `awk '{print -$6*0.5,'"$Z"'+$6*0.5*sin('"$TDIP"'*0.01745)/cos('"$TDIP"'*0.01745)}' rect.out`
EOF
    else
    gmt psxy $PROJ $LIMS -W2p,white -K -O -t30 >> $PSFILE << EOF
      `awk '{print -$6*0.5,'"$Z"'-$6*0.5*sin('"$TDIP"'*0.01745)/cos('"$TDIP"'*0.01745)}' rect.out`
      0 $Z
      `awk '{print $6*0.5,'"$Z"'+$6*0.5*sin('"$TDIP"'*0.01745)/cos('"$TDIP"'*0.01745)}' rect.out`
EOF
    fi
fi

# Legend (all coordinates are in cm from the bottom left)
X1="0.2"
X2="3.2"
Y1="0.2"
Y2="3.3"
XM=`echo $X1 $X2 | awk '{print 0.5*($1+$2)}'`
SHIFT=`echo $TSTR $AZ $WID $X1 $X2 |\
       awk '{if($2-$1>0){print ""}else{print "-X"($3*2.54-$4-$5)"c"}}'`
gmt psxy -JX10c -R0/10/0/10 -W1p -Gwhite $SHIFT -K -O >> $PSFILE << EOF
$X1 $Y1
$X1 $Y2
$X2 $Y2
$X2 $Y1
$X1 $Y1
EOF
LON0=`echo $LON0 | awk '{printf("%10.2f"),$1}' | awk '{print $1}'`
LAT0=`echo $LAT0 | awk '{printf("%10.2f"),$1}' | awk '{print $1}'`
Z0=`echo $Z0 | awk '{printf("%10.2f"),$1}' | awk '{print $1}'`
gmt pstext -JX10c -R0/10/0/10 -F+f+j -K -O >> $PSFILE << EOF
$XM 2.9 12,1 CM @_Target Faults@_
$XM 2.4 10,0 CM Strike/Dip/Rake
$XM 2.0 10,0 CM $TSTR\260/$TDIP\260/$TRAK\260
$XM 0.5 8,0 CM (Projected)
EOF
# Projected focal mechanism of target faults
XF="$XM"  # center of fault in x direction
YF="1.2"  # center of fault in y direction
FLT="0.8" # diameter of beach ball
TRAK=`echo $TRAK | awk '{print $1+0.1}'`
echo $XF $YF 0 $TSTR $TDIP $TRAK 5 |\
    gmt pscoupe -JX10c -R0/10/0/10 -Ad$XF/$YF/$AZ/1e4/90/1e4/-1e4/1e4 -Sa${FLT}c \
        -G155/155/155 -K -O -Xa${XF}c -Ya${YF}c -N >> $PSFILE
# Relative motion vectors
TYPE=`echo $TRAK | awk '{if($1>0){print "TH"}else{print "NO"}}'`
if [ $DIPD == "R" -a $TYPE == "TH" ]
then
    echo $XF $YF $TDIP 0.5 0.1 $TRAK |\
        awk '{print $1+$5*sin($3*0.01745),$2+$5*cos($3*0.01745),-$3,$4}' |\
        gmt psxy -JX10c -R0/10/0/10 -Sv5p+jc+b+l+a60 -W1p -Gblack -K -O >> $PSFILE
    echo $XF $YF $TDIP 0.5 0.1 |
        awk '{print $1-$5*sin($3*0.01745),$2-$5*cos($3*0.01745),-$3,$4}' |\
        gmt psxy -JX10c -R0/10/0/10 -Sv5p+jc+e+r+a60 -W1p -Gblack -K -O >> $PSFILE
elif [ $DIPD == "L" -a $TYPE == "TH" ]
then
    echo $XF $YF $TDIP 0.5 0.1 |\
        awk '{print $1-$5*sin($3*0.01745),$2+$5*cos($3*0.01745),$3,$4}' |\
        gmt psxy -JX10c -R0/10/0/10 -Sv5p+jc+e+l+a60 -W1p -Gblack -K -O >> $PSFILE
    echo $XF $YF $TDIP 0.5 0.1 |
        awk '{print $1+$5*sin($3*0.01745),$2-$5*cos($3*0.01745),$3,$4}' |\
        gmt psxy -JX10c -R0/10/0/10 -Sv5p+jc+b+r+a60 -W1p -Gblack -K -O >> $PSFILE
elif [ $DIPD == "R" -a $TYPE == "NO" ]
then
    echo $XF $YF $TDIP 0.5 0.1 $TRAK |\
        awk '{print $1+$5*sin($3*0.01745),$2+$5*cos($3*0.01745),-$3,$4}' |\
        gmt psxy -JX10c -R0/10/0/10 -Sv5p+jc+e+l+a60 -W1p -Gblack -K -O >> $PSFILE
    echo $XF $YF $TDIP 0.5 0.1 |
        awk '{print $1-$5*sin($3*0.01745),$2-$5*cos($3*0.01745),-$3,$4}' |\
        gmt psxy -JX10c -R0/10/0/10 -Sv5p+jc+b+r+a60 -W1p -Gblack -K -O >> $PSFILE
elif [ $DIPD == "L" -a $TYPE == "NO" ]
then
    echo $XF $YF $TDIP 0.5 0.1 |\
        awk '{print $1-$5*sin($3*0.01745),$2+$5*cos($3*0.01745),$3,$4}' |\
        gmt psxy -JX10c -R0/10/0/10 -Sv5p+jc+b+l+a60 -W1p -Gblack -K -O >> $PSFILE
    echo $XF $YF $TDIP 0.5 0.1 |
        awk '{print $1+$5*sin($3*0.01745),$2-$5*cos($3*0.01745),$3,$4}' |\
        gmt psxy -JX10c -R0/10/0/10 -Sv5p+jc+e+r+a60 -W1p -Gblack -K -O >> $PSFILE
fi

# Location map
#PROJ="-JM1i"
#LIMS=`gmtinfo sta.dat -I0.1/0.1`
#W=`echo $LON0 | awk '{print $1-3}'`
#E=`echo $LON0 | awk '{print $1+3}'`
#S=`echo $LAT0 | awk '{print $1-3}'`
#N=`echo $LAT0 | awk '{print $1+3}'`
#LIMS="-R$W/$E/$S/$N"
#SHFT=`echo $WID | awk '{print $1+0.2}'`
#gmt psbasemap $PROJ $LIMS -Bf1 -K -O -X${SHFT}i --MAP_FRAME_TYPE=plain >> $PSFILE
#gmt pscoast $PROJ $LIMS -W1p -Di -K -O >> $PSFILE
## Plot source fault
#if [ $SRC_TYPE == "FFM" ]
#then
#    ff2gmt -f ffm.dat -clipseg clip.out
#    gmt psxy clip.out $PROJ $LIMS -W1p,105/105/105 -K -O -t40 >> $PSFILE
#else
#    awk '{print $1,$2,$4,$5,$6}' rect.out |\
#        gmt psxy $PROJ $LIMS -SJ -W1p,105/105/105 -K -O -t40 >> $PSFILE
#fi
## Plot epicenter
#if [ $SRC_TYPE == "FFM" ]
#then
#    LONX=`sed -n -e "3p" ffm.dat | sed -e "s/.*Lon:/Lon:/" | awk '{print $2}'`
#    LATX=`sed -n -e "3p" ffm.dat | sed -e "s/.*Lon:/Lon:/" | awk '{print $4}'`
#    echo $LONX $LATX |\
#        gmt psxy $PROJ $LIMS -Sa0.15i -W1p,black -K -O  >> $PSFILE
#fi
#awk '{if(NR==1){print $1,$2}}END{print $1,$2}' sta.dat |\
#    gmt psxy $PROJ $LIMS -W1p,blue -K -O >> $PSFILE
#awk '{if(NR==1){print $1,$2}}END{print $1,$2}' sta.dat |\
#    gmt psxy $PROJ $LIMS -Sc0.4c -W0.5p -Gwhite -K -O >> $PSFILE
#awk '{if(NR==1){print $1,$2,"9,0 CM -"}}' sta.dat |\
#    gmt pstext $PROJ $LIMS -F+f+j -K -O >> $PSFILE
#awk 'END{print $1,$2,"9,0 CM +"}' sta.dat |\
#    gmt pstext $PROJ $LIMS -F+f+j -K -O >> $PSFILE

echo 0 0 | gmt psxy $PROJ $LIMS -O >> $PSFILE

#####
#	CLEAN UP
#####
ps2pdf $PSFILE
rm Ad*
rm no_green_mwh.cpt
